(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function [GP_Inline]  in_range (x : int) requires { True } ensures 
    { True } returns
     = (([GP_Pretty_Ada:-1] (first <= x)) /\ ([GP_Pretty_Ada:-2] (x <= last)))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))

end

(* Module giving a predicate for the default initial assumption of type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___dic
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "Tmy_int_arrayB" defined at qoaconv.ads:39, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__integer__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = Standard__integer.integer
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              ( forall ([mlw:proxy_symbol] [introduced] temp___idx_171) : int
              [].(if
                 ((a__first <= ([mlw:proxy_symbol]
                     [introduced] temp___idx_171)) /\
                    (([mlw:proxy_symbol] [introduced] temp___idx_171)
                       <= a__last))
                 then
                 ((Standard__integer__rep.to_rep
                     (get a ([mlw:proxy_symbol] [introduced] temp___idx_171)))
                    = (Standard__integer__rep.to_rep
                         (get b
                            ((b__first - a__first) + ([mlw:proxy_symbol]
                               [introduced] temp___idx_171)))))
                 )))
  
  axiom bool_eq_rev (function bool_eq) : ( forall a b : map
                                         [].( forall a__first a__last
                                            b__first b__last : int
                                            [].(((bool_eq b b__first b__last
                                                    a a__first a__last)
                                                   = True) ->
                                                  ((if (a__first <= a__last)
                                                   then
                                                   ((b__first <= b__last) /\
                                                      ((a__last - a__first)
                                                         = (b__last
                                                              - b__first)))
                                                    else (b__first > b__last))
                                                     /\
                                                     ( forall
                                                     ([mlw:proxy_symbol]
                                                     [introduced] temp___idx_171)
                                                     : int
                                                     [].(if
                                                        ((a__first
                                                            <= ([mlw:proxy_symbol]
                                                            [introduced] temp___idx_171))
                                                           /\
                                                           (([mlw:proxy_symbol]
                                                              [introduced] temp___idx_171)
                                                              <= a__last))
                                                        then
                                                        ((Standard__integer__rep.to_rep
                                                            (get a
                                                               ([mlw:proxy_symbol]
                                                               [introduced] temp___idx_171)))
                                                           = (Standard__integer__rep.to_rep
                                                                (get b
                                                                   ((b__first
                                                                    - a__first)
                                                                    + ([mlw:proxy_symbol]
                                                                    [introduced] temp___idx_171)))))
                                                        ))))))

end

(* Module for defining a ref holding the value of variable "qoa_reciprocal_tab" defined at qoaconv.ads:48, created in Gnat2Why.Decls.Translate_Variable *)
module Qoaconv__qoa_reciprocal_tab
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__integer
  
  val qoa_reciprocal_tab [model_trace:3334] [model_projected]
  [name:Qoa_Reciprocal_Tab] [sloc:qoaconv.ads:48]: Array__Int__Standard__integer.map

end

(* Module for defining the constant "v" defined at qoaconv.ads:120, created in Gnat2Why.Decls.Translate_Constant *)
module Qoaconv__qoa_div__v
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [name:V] [model_trace:3771] [sloc:qoaconv.ads:120] v () requires
    {  } ensures  {  } returns int

end

(* Module for defining the constant "scalefactor" defined at qoaconv.ads:120, created in Gnat2Why.Decls.Translate_Constant *)
module Qoaconv__qoa_div__scalefactor
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [name:ScaleFactor] [model_trace:3774] [sloc:qoaconv.ads:120]
    scalefactor () requires {  } ensures  {  } returns int

end

(* Module for defining the constant "reciprocal" defined at qoaconv.adb:72, created in Gnat2Why.Decls.Translate_Constant *)
module Qoaconv__qoa_div__reciprocal
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:1163] [name:Reciprocal] [sloc:qoaconv.adb:72]
    reciprocal () requires {  } ensures  {  } returns int

end

(* Module for defining a ref holding the value of variable "n" defined at qoaconv.adb:73, created in Gnat2Why.Decls.Translate_Variable *)
module Qoaconv__qoa_div__n
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val n [model_projected] [model_trace:1170]
  [name:N] [sloc:qoaconv.adb:73]: int

end

(* Module for defining a ref holding the value of variable "tmp" defined at qoaconv.adb:74, created in Gnat2Why.Decls.Translate_Variable *)
module Qoaconv__qoa_div__tmp
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val tmp [name:Tmp] [model_projected]
  [model_trace:1173] [sloc:qoaconv.adb:74]: int

end

(* Module for axiomatizing type "Tmy_int_array_16D1" defined at qoaconv.ads:43, created in Gnat2Why.Types.Translate_Type *)
module Qoaconv__Tmy_int_array_16D1
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type tmy_int_array_16D1  = <range 0 15>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 15
  
  function [GP_Inline]  in_range (x : int) requires { True } ensures 
    { True } returns
     = (([GP_Pretty_Ada:-1] (first <= x)) /\ ([GP_Pretty_Ada:-2] (x <= last)))
  
  clone export ada__model.Static_Discrete with axiom . type t = tmy_int_array_16D1,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type tmy_int_array_16D1__ref  = { mutable tmy_int_array_16D1__content : tmy_int_array_16D1 }
  
  function   tmy_int_array_16D1__ref_tmy_int_array_16D1__content__projection
    (a : tmy_int_array_16D1__ref) requires {  } ensures  {  } returns
    tmy_int_array_16D1 = a.tmy_int_array_16D1__content
  
  meta model_projection function tmy_int_array_16D1__ref_tmy_int_array_16D1__content__projection
  
  meta inline:no function tmy_int_array_16D1__ref_tmy_int_array_16D1__content__projection
  
  function   tmy_int_array_16D1__havoc (x : tmy_int_array_16D1__ref) requires
    {  } ensures  {  } returns unit

end

(* Module giving axioms for type "my_int_array_16" defined at qoaconv.ads:43, created in Gnat2Why.Types.Generate_Type_Completion *)
module Qoaconv__my_int_array_16___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_334) : Array__Int__Standard__integer.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_330) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_331) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_332) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_333) : bool) requires
    { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "Tmy_int_array_16D1" defined at qoaconv.ads:43, created in Gnat2Why.Types.Generate_Type_Completion *)
module Qoaconv__Tmy_int_array_16D1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for defining the value of constant "reciprocal" defined at qoaconv.adb:72, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Qoaconv__qoa_div__reciprocal___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "qoa_div" defined at qoaconv.ads:120, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Qoaconv__qoa_div__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Int_Shift
  use        Standard__integer
  use        Standard__integer
  use        Standard__integer___axiom
  use        Standard__integer___dic
  use        Standard__integer__rep
  use        Array__Int__Standard__integer
  use        Qoaconv__qoa_reciprocal_tab
  use        Qoaconv__qoa_div__v
  use        Qoaconv__qoa_div__scalefactor
  use        Qoaconv__qoa_div__reciprocal
  use        Qoaconv__qoa_div__n
  use        Qoaconv__qoa_div__tmp
  use        Array__Int__Standard__integer
  use        Qoaconv__Tmy_int_array_16D1
  use        Qoaconv__my_int_array_16___axiom
  use import int.Int
  use        _gnatprove_standard.Int_Shift
  use        Standard__integer
  use        Standard__integer
  use        Standard__integer___axiom
  use        Standard__integer___dic
  use        Standard__integer__rep
  use        Array__Int__Standard__integer
  use        Qoaconv__qoa_reciprocal_tab
  use        Qoaconv__qoa_div__v
  use        Qoaconv__qoa_div__scalefactor
  use        Qoaconv__qoa_div__reciprocal
  use        Qoaconv__qoa_div__n
  use        Qoaconv__qoa_div__tmp
  use        Array__Int__Standard__integer
  use        Qoaconv__Tmy_int_array_16D1
  use        Qoaconv__Tmy_int_array_16D1___axiom
  use        Qoaconv__my_int_array_16___axiom
  use        Array__Int__Standard__integer
  use        Qoaconv__qoa_div__reciprocal___axiom
  use        Array__Int__Standard__integer
  
  val qoaconv__qoa_div__result [name:Qoa_Div] [model_projected]
  [model_trace:3770@result] : int
  
  function  [sloc:qoaconv.ads:120] def (__void_param : unit) requires
    { True } ensures  {  } returns
     = (* Assume dynamic invariants of inputs of the subprogram qoaconv.ads:120 *);
        assume
        { (Qoaconv__my_int_array_16___axiom.dynamic_invariant
             !Qoaconv__qoa_reciprocal_tab.qoa_reciprocal_tab True False True
             True) };
        assume
        { (Standard__integer___axiom.dynamic_invariant Qoaconv__qoa_div__v.v
             True False True True) };
        assume
        { (Standard__integer___axiom.dynamic_invariant
             Qoaconv__qoa_div__scalefactor.scalefactor True False True True) };
        (* Assume moved pointers in outputs of the subprogram qoaconv.ads:120 *);
        (* Check for RTE in the Pre of the subprogram qoaconv.ads:120 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram qoaconv.ads:120 *);
        (try
        ();
          ([sloc:qoaconv.adb:72] ());
          ([sloc:qoaconv.adb:72] (let qoaconv__qoa_div__reciprocal__assume =
          ( (Standard__integer__rep.to_rep
               (Array__Int__Standard__integer.get
                  !Qoaconv__qoa_reciprocal_tab.qoa_reciprocal_tab assert
                  { ([sloc:qoaconv.adb:72] ([vc:annotation]
                                           [GP_Check:74:VC_INDEX_CHECK:qoaconv.adb:72:60]
                                           [GP_Shape:reciprocal_decl__ixdcomp] (
                                           (Qoaconv__Tmy_int_array_16D1.first
                                              <= Qoaconv__qoa_div__scalefactor.scalefactor)
                                             /\
                                             (Qoaconv__qoa_div__scalefactor.scalefactor
                                                <= Qoaconv__Tmy_int_array_16D1.last)))) };
                  Qoaconv__qoa_div__scalefactor.scalefactor)))
          in assume
          { (qoaconv__qoa_div__reciprocal__assume
               = Qoaconv__qoa_div__reciprocal.reciprocal) });
          assume
          { (Standard__integer___axiom.dynamic_invariant
               Qoaconv__qoa_div__reciprocal.reciprocal True False True True) });
          ([sloc:qoaconv.adb:73] assume
          { (Standard__integer___dic.default_initial_assumption
               !Qoaconv__qoa_div__n.n False) };
          assume
          { (Standard__integer___axiom.dynamic_invariant
               !Qoaconv__qoa_div__n.n False False True True) });
          ([sloc:qoaconv.adb:74] assume
          { (Standard__integer___dic.default_initial_assumption
               !Qoaconv__qoa_div__tmp.tmp False) };
          assume
          { (Standard__integer___axiom.dynamic_invariant
               !Qoaconv__qoa_div__tmp.tmp False False True True) });
          ();
          ([sloc:qoaconv.adb:76] ());
          ([sloc:qoaconv.adb:76] ());
          ([sloc:qoaconv.adb:76] ( Qoaconv__qoa_div__tmp.tmp :=
          ( ([sloc:qoaconv.adb:76] ([vc:annotation]
                                   [GP_Shape:tmp_assign__add]
                                   [GP_Check:76:VC_OVERFLOW_CHECK:qoaconv.adb:76:29] (
                                   Standard__integer.range_check_
                                     (([sloc:qoaconv.adb:76] ([GP_Check:75:VC_OVERFLOW_CHECK:qoaconv.adb:76:16]
                                                             [vc:annotation]
                                                             [GP_Shape:tmp_assign__add__mult] (
                                                             Standard__integer.range_check_
                                                               (Qoaconv__qoa_div__v.v
                                                                  * Qoaconv__qoa_div__reciprocal.reciprocal))))
                                        + 32768)))))));
          ([sloc:qoaconv.adb:77] ());
          ([sloc:qoaconv.adb:77] ());
          ([sloc:qoaconv.adb:77] ());
          ([sloc:qoaconv.adb:77] ( Qoaconv__qoa_div__n.n :=
          ( (_gnatprove_standard.Int_Shift.shift_right
               !Qoaconv__qoa_div__tmp.tmp ( 16) 32))));
          ([sloc:qoaconv.adb:78] ());
          ([sloc:qoaconv.adb:79] ());
          ([sloc:qoaconv.adb:79] ());
          ([sloc:qoaconv.adb:79] ());
          ([sloc:qoaconv.adb:80] ());
          ([sloc:qoaconv.adb:80] ());
          ([sloc:qoaconv.adb:80] ());
          ([sloc:qoaconv.adb:80] ());
          ([sloc:qoaconv.adb:78] ( Qoaconv__qoa_div__n.n :=
          ( ([sloc:qoaconv.adb:79] ([GP_Check:80:VC_OVERFLOW_CHECK:qoaconv.adb:79:54]
                                   [vc:annotation]
                                   [GP_Shape:n_assign__sub] (Standard__integer.range_check_
                                                               (([sloc:qoaconv.adb:79] 
                                                                ([GP_Shape:n_assign__sub__add]
                                                                [vc:annotation]
                                                                [GP_Check:78:VC_OVERFLOW_CHECK:qoaconv.adb:79:11] (
                                                                Standard__integer.range_check_
                                                                  (!Qoaconv__qoa_div__n.n
                                                                    + 
                                                                    ([sloc:qoaconv.adb:79] 
                                                                    ([vc:annotation]
                                                                    [GP_Check:77:VC_OVERFLOW_CHECK:qoaconv.adb:79:33]
                                                                    [GP_Shape:n_assign__sub__add__sub] (
                                                                    Standard__integer.range_check_
                                                                    ((_gnatprove_standard.Int_Shift.shift_right
                                                                    Qoaconv__qoa_div__v.v
                                                                    ( 0) 32)
                                                                    - (_gnatprove_standard.Int_Shift.shift_left
                                                                    Qoaconv__qoa_div__v.v
                                                                    ( 0) 32)))))))))
                                                                  - ([sloc:qoaconv.adb:80] 
                                                                    ([GP_Check:79:VC_OVERFLOW_CHECK:qoaconv.adb:80:29]
                                                                    [vc:annotation]
                                                                    [GP_Shape:n_assign__sub__sub] (
                                                                    Standard__integer.range_check_
                                                                    ((_gnatprove_standard.Int_Shift.shift_right
                                                                    !Qoaconv__qoa_div__n.n
                                                                    ( 0) 32)
                                                                    - (_gnatprove_standard.Int_Shift.shift_left
                                                                    !Qoaconv__qoa_div__n.n
                                                                    ( 0) 32))))))))))));
          ([sloc:qoaconv.adb:81] ());
          ([sloc:qoaconv.adb:81] ( qoaconv__qoa_div__result :=
          !Qoaconv__qoa_div__n.n);
          raise Return__exc);
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        !qoaconv__qoa_div__result

end
